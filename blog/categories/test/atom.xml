<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Test | My Octopress Blog]]></title>
  <link href="http://chiwenchen.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://chiwenchen.github.io/"/>
  <updated>2017-05-31T12:10:54+08:00</updated>
  <id>http://chiwenchen.github.io/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Test Styles of Rails]]></title>
    <link href="http://chiwenchen.github.io/blog/2016/02/23/test-styles-of-rails/"/>
    <updated>2016-02-23T12:42:54+08:00</updated>
    <id>http://chiwenchen.github.io/blog/2016/02/23/test-styles-of-rails</id>
    <content type="html"><![CDATA[<p>There are three different testing style or process we use in developing rails app.</p>

<h2>Outside in</h2>


<p>The first is called outside in, this style means when we developing a new feature, we thinking in a integration level or business level first, by doing this, we can clarify the business value of this feature in the first place, than from here, this will drive us to implement a level deeper which is controller level to fulfill the need from the feature, and then one level deeper to model layer.</p>

<p>The most common usecase of the approach is when we work with customer and the requiremnts is very clear, just write out the descriptions of the feature and implement it step by step will make the developing process more fluent.</p>

<!-- more -->




<h2>Inside out</h2>


<p>Second style is totally bottom up, we start from the most depth layer which is model, we write test description of each unit and then fulfill the test, once all the model we think is complete, then move to the controller layer and then to view template.</p>

<p>The pros of this approach is we can start small, this will allow developer more focus on one thing and make it easier to complete, but the cons of this is some times when we move to next layer will find that some of our model method is useless and we lack some of the function in the other hand, this will become time comsumming and makes a lot of goes and back.</p>

<h2>Meet in the middle</h2>


<p>The third style takes a good balance between the previous two.</p>

<p>In this approach, we firstly build out the view template, this give us a vision of how the web page will look like and imaging how people will interact with the site, and then we start from the controller to make the page alive, once we fiound the method is way too complicate for controller, we will then drop it to model layer, also make unit test for the function, once the unit is well tested, we then back to the controller layer to implement it. after the controller layer and model layer is finished and tested, we then start to write feature test to mimic the user experience.</p>

<p>By doing this, we will have clear business vision in first place just like <strong>Outside in</strong> style, as well as having the pros of easy to start small just like <strong>Inside out</strong>, at the same time, won&rsquo;t waste too much time on guessing what method to work on.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec - Controller Test]]></title>
    <link href="http://chiwenchen.github.io/blog/2015/06/24/rspec-controller-test/"/>
    <updated>2015-06-24T14:47:36+08:00</updated>
    <id>http://chiwenchen.github.io/blog/2015/06/24/rspec-controller-test</id>
    <content type="html"><![CDATA[<p>To better implement controller, we can write specification(test) for each controller to define and test their behavior. The biggest benefit is we can have fully control of how controllers behave in all aspect without testing it manully, if we do not use Rspec to implement auto test, we have to use <code>rails console</code> or <code>browser</code> to test it by ourself. In other words, when we write Rspec, we have to make sure the spec is covering all the possibility, otherwise, we might be caught by some annoying bugs.</p>

<!-- more -->


<h2>Fabricator and Faker</h2>


<p>To better way we test our code with rspec is to use both <code>fabricator</code> and <code>faker</code> along with our testing. this two gems work together can give us a powerful tool to make fake data for testing.</p>

<p>To install it, just add <code>gem fabricator</code> and <code>gem faker</code> in our Gemfile and run bundle install, and it will be all set.</p>

<h2>Use Fabricator</h2>


<p>To use fabricator, we need a folder to put all the fabricators, which build for each models. Add a folder under <code>app/spec</code> called <code>fabricators</code>.
Inside the folder, let&rsquo;s say we want to automatically generate fake data for <code>User</code> Model, so every time we need to have some data for testing purpose, we don&rsquo;t need to made up data ourself anymore. create a file called <code>User_fabricator.rb</code>. inside the file, put some code like this.
<code>rb
Fabricator(:video) do #video is the model name
    title {Faker::Lorem.words(4).join(" ")} #title is the parameter
    description {Faker::Lorem.sentence}
end
</code>
This is the typical fabricator with faker gem. To see more stuff what faker can create, visit <a href='https://github.com/stympy/faker'>Faker</a></p>

<p><!-- Once we give the rule what to attach to the object when calling fabricator, --> we then can use it like this in our test file.</p>

<pre><code>Fabricator(:user)
</code></pre>

<p>This single line will give as a brand new object of <code>User</code> Model filled with fake data.</p>

<p><h2>context, let and before</h2></p>

<p><h4>context</h4></p>

<p><code>context</code> is used when we have some common statement for each test item, then we can group it use <code>context</code>. for example.</p>

<pre><code>describe "GET show" do 
  context 'with authenticated user' do 
    it 'sets the @video'
    it 'redirect_to video_path'
  end
  context 'user is not authenticated' do 
    it 'not sets the @video'
    it 'redirect_to signin_path'
  end
end
</code></pre>

<p><h4>let</h4></p>

<p><code>let</code> is used to create a variable that can be used in a</p>

<p><h2>Controller testing</h2></p>

<p>To test controller, basiclly there are two functions we need to test. First is setting instance variable that is ready for view, second is to render template or redirect to other action.</p>

<p>Before that, let&rsquo;s create file and write out the basic structure.</p>

<p>create a folder called <code>controllers</code> under <code>app/spec</code>, inside the folder, create a file called <code>users_controller_spec.rb</code>. write the fundamental like this:</p>

<pre><code>require 'spec_helper'

describe UsersControllers do 
  describe "GET show"
    #put test item here
  end
end
</code></pre>

<p>The first line is neccessary! line 3 shows which controller we are goning to test, and line 4 is identify which action we are going to test inside this code block. first we need to give the correct HTTP verb to match the route.rb, in this case, it&rsquo;s the <code>GET</code> and following is the name of the action.</p>

<p>Next, puts some test item here.
<h3>Test the instance object</h3></p>

<pre><code>...
describe "GET show" do
  it "sets @user" do 
    # 1. setup the data
    user = Fabricator(:user, name: 'Tom')
    # 2. execute the action
    get :show, id: user.id 
    # 3. compare the expect with actual result  
    expect(assigns(:user)).to eq(user)
  end
  it "render show template"
end
</code></pre>

<p>Line 5, the Fabricator will create a new object for us, but if we want the paricular parameter, we can overwrite it just like overwrite the name to Tom in this case.</p>

<p>Line 7 will send a fake request to action <code>show</code> with the params[:id] set to user.id.</p>

<p>Line 9, the <code>:user</code> equals <code>@user</code>, which is inside the <code>show</code> action, so we can verify if the returned object <code>:user</code>is the same as the user variable here as we expect.</p>

<p><h3>Test render or redirect_to </h3>
<code>
...
describe "GET show" do
  it "redirect to the sign in page" do
    user = Fabricate(:user)
    get :show, id: user.id
    expect(response).to redirect_to front_videos_path
  end
end
</code>
Here we alse need to set the instance variable and call the action. the only difference is we call <code>responce</code> reserverd word to specify that we want to verify the routing after the action.</p>

<p>Generally, if the routing is given by rails by convention, then we will skip this test. For example, if the action looks like <code>def show; end</code>, then we won&rsquo;t need to test routing for this action.</p>

<p><h3>Execute test in Terminal</h3>
running below comand will only execute the test for controllers.</p>

<pre><code>rspec spec/controllers
</code></pre>

<p>running the below comand will only execute the test written in this particular file.
<code>
rspec spec/controllers/users_controller_spec.rb
</code>
running the below comand will only execute the test written in the line you specify.
for example, the test we want to run is this one:
<code>
it 'set up the @user'
  #testing code
end
</code>
then we can execute the test like this.
<code>
rspec spec/controllers/users_controller_spec.rb:1
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rspec - Build Rspec and First Model Test]]></title>
    <link href="http://chiwenchen.github.io/blog/2015/05/26/rspec-model-test/"/>
    <updated>2015-05-26T14:12:08+08:00</updated>
    <id>http://chiwenchen.github.io/blog/2015/05/26/rspec-model-test</id>
    <content type="html"><![CDATA[<p>Rspec is a widespread BDD(Behaviour-Driven Development) tool for ruby. coding with Rspec, we can develop our application in TDD way. write testing code(also can be a spec document) and then write code to fulfill the requirement of testing code. once all the test passed, the code base is also finished. Here we will talk about how to set up Rspec environment and also write the Unit test for our model.</p>

<!-- more -->


<h2>Build up the Rspec test environment</h2>


<p>in <code>Gemfile</code>
<code>rb
group :test, :development do
  gem 'rspec-rails'
end
</code>
and then run <code>bundle install</code> to install the <code>rspec</code>.</p>

<pre><code>rails g rspec:install
</code></pre>

<p>This will generate two documents and one folder: <code>spec</code> folder, <code>.rspec</code> and <code>spec/spec_helper.rb</code>.
Also another thing is to prepare our test database, because the test database is seperate from the development databse and will not interfere each other, but will share the same schema. To run below command generate the test database.</p>

<pre><code>rake db:test:prepare
</code></pre>

<p>the <code>spec/spec_helper.rb</code> is the config file used to configure Rspec itself. Meanwhile, <code>spec</code> is where we will put our testing file. Now generate a folder <code>models</code> under <code>spec</code>. Here is to place all the <strong>Unit test</strong> for each models. Under the <code>models</code>, we can create a file called <code>PROJECTNAME_spec.rb</code>. Which the <code>PROJECTNAME</code> will same as your project name. In this case, we name it <code>myflix_spec.rb</code>.</p>

<pre><code>require 'spec_helper' #this line is required in all test file. the rspec will load rails enviroment alos with this class.

describe Video do #'describe' is the syntax for test, and the Video is the model name matchs the model we are going to test.

  it 'save itself' do # 'it' is the saved word
    #1.  set up the stage(data)
    video = Video.save(title: 'Mission Impossible 3', description: 'Very cool movie')

    #2.  perform a action
    video.save

    #3.  verify the result
    Video.first.title.should == 'Mission Impossible 3'

  end

end
</code></pre>

<p>Next thing is to run <code>rspec</code> in terminal to see the result.</p>

<pre><code>➜  myflix git:(master) ✗ rspec
.

Finished in 0.03922 seconds
1 example, 0 failures

Randomized with seed 18414
</code></pre>
]]></content>
  </entry>
  
</feed>
